{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","fetch","then","response","json","users","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OAAQ,sBAAKC,UAAU,iBAAf,UACJ,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YAC1E,6BAAsBJ,EAAQK,MAArBL,EAAQG,IACjB,4BAAIH,EAAQM,YCFPC,EAAW,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACtB,OAAQ,qBAAKP,UAAU,YAAf,SACHO,EAASC,KAAI,SAAAT,GAAO,OAAG,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,UCJtCO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAQ,uBAAOX,UAAU,SACVY,KAAK,SACLF,YAAaA,EAAaG,SAAUF,MCkCxCG,E,kDAjCX,aAAe,IAAD,8BACV,gBA2BJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SA3BzC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IAJP,E,0CAQd,WAAU,IAAD,EAE2BI,KAAKD,MAA9Bb,EAFF,EAEEA,SAAUU,EAFZ,EAEYA,YAEXK,EAAmBf,EAASgB,QAAO,SAAAxB,GAAO,OAAIA,EAAQK,KAAKoB,cAAcC,SAASR,EAAYO,kBACpG,OACI,sBAAKxB,UAAU,MAAf,UACI,iDACA,cAAC,EAAD,CAAWU,YAAY,kBAAkBC,aAAcU,KAAKV,eAC5D,cAAC,EAAD,CAAUJ,SAAUe,S,+BAKhC,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAACT,SAAUuB,W,GA1BlCC,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.904cb46d.chunk.js","sourcesContent":["import \"./card.styles.css\"\r\n\r\nexport const Card = ({monster}) => {\r\n    return (<div className='card-container'>\r\n        <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n        <h2 key={monster.id}>{monster.name}</h2>\r\n        <p>{monster.email}</p>\r\n    </div>)\r\n}\r\n","import \"./card-list.styles.css\"\r\nimport {Card} from \"../card/card.component\";\r\n\r\n\r\nexport const CardList = ({monsters}) => {\r\n    return (<div className='card-list' >\r\n        {monsters.map(monster=>(<Card key={monster.id} monster={monster}/>))}\r\n    </div>);\r\n}\r\n","import \"./search-box.styles.css\"\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (<input className='search'\r\n                   type=\"search\"\r\n                   placeholder={placeholder} onChange={handleChange}/>)\r\n}\r\n","import './App.css';\nimport {Component} from \"react\";\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchField: \"\"\n        }\n    }\n\n    render() {\n\n        const {monsters, searchField} = this.state;\n\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n        return (\n            <div className=\"App\">\n                <h1>Monster Rolodex</h1>\n                <SearchBox placeholder='search monsters' handleChange={this.handleChange}/>\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}))\n    }\n\n    handleChange = (event) => {\n        this.setState({searchField: event.target.value})\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}